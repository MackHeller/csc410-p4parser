#lang rosette

(require "Submission_7.rkt")

(if (eq? (vector-length (current-command-line-arguments)) 0)
    (printf "Please indicate the test you wish to run\n")
    (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 1)
        (simplify-exp (syntax (+ a b)))
        (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 2)
            (simplify-exp (syntax (if #t (+ a 0) (- b 9))))
            (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 3)
                (simplify-exp (syntax (+ (+ 1 a) (+ -1 b))))
                (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 4)
                    (simplify-exp (syntax (- (- 1 a) (+ -1 b))))
                    (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 5)
                        (simplify-exp (syntax (- (if (>= (max b 0) 0) (+ b 1) (- b 1)) 1)))
                        (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 6)
                            (simplify-exp (syntax (or (and a b) (and a b))))
                            (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 7)
                                (simplify-exp (syntax (and (or a b) (or a b))))
                                (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 8)
                                    (simplify-exp (syntax (and (not (or a b)) (or a b))))
                                        (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 9)
                                            (simplify-exp (syntax (min (max (+ xm (min 0 0)) lm) (min xm2 lm2))))
                                            (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 10)
                                                (simplify-exp (syntax (if (> (+ (- xmts lmts) xpos) (+ xaux_1 xpos)) xpos lpos)))
                                                (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 11)
                                                    (simplify-exp (syntax  (+ -4 (+ 4 (+ xsum lsum)))))
                                                    (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 12)
                                                        (simplify-exp (syntax (max 0 (max -2 (max x.m l.m))) ))
                                                        (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 13)
                                                            (simplify-exp (syntax (+ (if (> xdiff 1) (- xdiff 1) (- xdiff 1)) (+ 1 l.diff))))
                                                            (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 14)
                                                                (simplify-exp (syntax  (+ (+ 1 a) (+ (max -1 0) b))))
                                                                (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 15)
                                                                    (simplify-exp (syntax (if (> a0 0) (and (> a b) (> (+ a a0) b)) (> a b))))
                                                                    (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 16)
                                                                        (simplify-exp (syntax  (+ (- a 1) (if b (+ a 1) (+ a a0)))))
                                                                        (if (eq? (string->number (vector-ref (current-command-line-arguments) 0)) 17)
                                                                            (simplify-exp (syntax (if (= (if (if a b #f) a #f) #t) (+ cl 1) 0)))
                                                                            (printf "Please choose a test between 1 and 17\n")))))))))))))))))))

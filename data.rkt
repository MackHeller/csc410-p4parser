;(
#lang rosette
(require racket/match)
(require rosette/lib/synthax)
(require racket/include)(include "ults.rkt")
(define-synthax(gen-expression (booleanvariables ...) (integervariables ...) (integerconstants ...) height)
 #:base (choose #t #f booleanvariables ... integervariables ... integerconstants ...)
 #:else (choose
         #t #f booleanvariables ... integervariables ... integerconstants ...
          ((choose = >= > <= < + - min max equal?) (gen-expression (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1))
                                                         (gen-expression (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1)))
          ((choose && ||) (gen-expression-weaker (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1))
                                                         (gen-expression-weaker (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1)))
          ((choose add1 sub1 !) (gen-expression (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1)))
          (if (gen-expression-weaker (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1))
              (gen-expression (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1))
              (gen-expression (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1)))
          )
  )
(define-synthax(gen-expression-weaker (booleanvariables ...) (integervariables ...) (integerconstants ...) height)
 #:base (choose booleanvariables ... integervariables ...)
 #:else (choose booleanvariables ... integervariables ... 
          ((choose = >= > <= < + - min max equal?) (gen-expression (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1))
                                                         (gen-expression (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1)))
          ((choose && ||) (gen-expression-weaker (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1))
                                                         (gen-expression-weaker (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1)))
          ((choose add1 sub1 !) (gen-expression (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1)))
          (if (gen-expression-weaker (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1))
              (gen-expression (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1))
              (gen-expression (booleanvariables ...)  (integervariables ...) (integerconstants ...) (- height 1))))) (define-symbolic x boolean?) (define-symbolic y integer?) (define (gen x y) (gen-expression (x) (y) () 0)) (syntax->datum (car (generate-forms (synthesize #:forall (list x y) #:guarantee (assert (eq? (if x y y) (gen x y))))))) ;)